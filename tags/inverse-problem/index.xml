<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inverse Problem on Rosenkreutz Studio</title>
    <link>https://cainmagi.github.io/tags/inverse-problem/</link>
    <description>Recent content in Inverse Problem on Rosenkreutz Studio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Jul 2018 13:52:21 -0500</lastBuildDate>
    
	<atom:link href="https://cainmagi.github.io/tags/inverse-problem/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tensorflow Inspection for FWM Curves 180602</title>
      <link>https://cainmagi.github.io/projects/python_tensorfwm201806/</link>
      <pubDate>Fri, 06 Jul 2018 13:52:21 -0500</pubDate>
      
      <guid>https://cainmagi.github.io/projects/python_tensorfwm201806/</guid>
      <description>Introduction In this project, we combine a deep-learning architecture with a traditional electromagnetic (EM) forward model which is differentiable. Since the model is differentiable, we could enable the gradient back propagated from the model to the deep-learning network. The following figure could be used to describe this design.
   The whole architecture of the project         Suppose we have gotten a group of response samples (i.</description>
    </item>
    
    <item>
      <title>Forward Model : Curves 180602</title>
      <link>https://cainmagi.github.io/projects/python_fwm201806/</link>
      <pubDate>Mon, 18 Jun 2018 12:55:34 -0500</pubDate>
      
      <guid>https://cainmagi.github.io/projects/python_fwm201806/</guid>
      <description>C++ Migrated Project Introduction This is a python-c-api that wrapping the C++ forward model codes (which is supported by OpenMP) with Numpy-API. To get the C++ codes, visit the master branch:
Master
 Note that the project is still private now, thus you may do not have the authority to visit this page.  The function prototype could be described as
float64_t *resp = curves(numLayers, Rh, Rv, Zbed, Dip, TVD);  This function is used to simulate the response of the azimuthal resistivity LWD tool.</description>
    </item>
    
  </channel>
</rss>