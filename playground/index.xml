<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Playground on Rosenkreutz Studio</title>
    <link>https://cainmagi.github.io/playground/</link>
    <description>Recent content in Playground on Rosenkreutz Studio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 May 2018 13:22:21 -0500</lastBuildDate>
    
	<atom:link href="https://cainmagi.github.io/playground/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advanced Linux Skills for Using NVIDIA Docker</title>
      <link>https://cainmagi.github.io/playground/20180531linuxdocker/</link>
      <pubDate>Thu, 31 May 2018 23:43:48 -0500</pubDate>
      
      <guid>https://cainmagi.github.io/playground/20180531linuxdocker/</guid>
      <description>Instruction   This is an instruction for those who want to know and make use of NVIDIA docker. In this section we would introduce what is docker and why we choose docker. If you have already know these, you could skip this section and get to the next one.
What is docker Before we talk about docker, to be specific, we need to introduce you some concepts:
   Name Meaning     Docker A tool for managing containers.</description>
    </item>
    
    <item>
      <title>Basic Linux Skills for Remote Controlling</title>
      <link>https://cainmagi.github.io/playground/20180526linuxskill/</link>
      <pubDate>Sat, 26 May 2018 17:01:12 -0500</pubDate>
      
      <guid>https://cainmagi.github.io/playground/20180526linuxskill/</guid>
      <description>Instruction Here we provides some basic instructions for how to access to the remote Linux server. We assume that the reader who learn this instruction could grant such conditions:
 Use a client device equipped with Windows; Has the full authority on both the client and the server; The client and the server is in the same domain.  To perform a test of whether it is ok for network equipments, type this command in Windows CMD:</description>
    </item>
    
    <item>
      <title>Bibile Study Notes of UH Group</title>
      <link>https://cainmagi.github.io/playground/20180525biblestudy/</link>
      <pubDate>Fri, 25 May 2018 09:43:00 -0500</pubDate>
      
      <guid>https://cainmagi.github.io/playground/20180525biblestudy/</guid>
      <description>Introduction This is a latex project of the Thursday fellowship in UH religion center. Although I attempt to build a full collection of our bible study progress, I have failed on this work. Now it only contains notes for several but not all meetings. Some of these notes are materials when I need to host the meeting.
Note that the language is Chinese.
Contents of the Book Now it contents:</description>
    </item>
    
    <item>
      <title>Instructions for creating a Hugo site</title>
      <link>https://cainmagi.github.io/playground/20180524ichs/</link>
      <pubDate>Thu, 24 May 2018 16:13:10 -0500</pubDate>
      
      <guid>https://cainmagi.github.io/playground/20180524ichs/</guid>
      <description>背景 这是一篇中文教程，基于前人的经验，补全一些没有提到的技巧。首先我们可以阅读以下站点的教程：
一篇基础的、关于如何使用Hugo创建新站点，并托管到Github的流程
补全教程：关于如何理解、使用Hugo主题
然而，实际编写站点内容没有固定的套路，很多情况下能使用哪些功能取决于对应的主题。譬如有的主题支持HTML5，我们就能实现一些对应的技巧；而有些相对简单的主题不支持，我们就只能实现一些基本功能。共通的一些技巧可以查阅：
Hugo官方文档
本站使用的模板是Forty，这个模板支持HTML5。在做好所有的基础设置以后，我们可以用MarkDown写任何一篇内容。关于更高级的编写内容的技巧，可以查阅模板自带的Element范例。这些高级技巧无一例外需要通过HTML语法实现，包括但不限于分栏 ，按钮 ，图标 ，表单 ，下标 或者上标如此等等……
补全 套用模板来定制主页 以Forty为例，下载后，其模板文档的关键结构如下：
forty |---archetypes |---exampleSite | |---archetypes | |---content | | `---blogs | | |---_index.md | | `---blog1.md | |---static | |---config.toml | `---netlify.toml |---images |---layouts |---static | |---img | `---elements.html `---theme.toml  我们可以看到，Element就在static目录下，它不是由MarkDown渲染出的，而是静态网页，我们需要的参考都只能通过HTML的形式获取。图像文件都保存在static/img下，但是这里有不只一个static文件夹，我们稍后再讨论。现在我们需要关注的是exampleSite，它是一个模板自带的范例站点，通过调用
hugo server --buildDrafts --watch  可以直接渲染出该范例，它就是模板提供预览的Demo。在这个Demo里面，主页是由config.toml定制的，我们需要将它和netlify.toml拷贝到我们自己的站点根目录下，覆盖原有的文件，通过上述命令，我们可以直接看到，主页的定制生效在了我们自己的站点上。
config.toml是用Golang编写的，但是作为配置文件，它对于新手并不难懂，并且有丰富的注释。从[params]开始，该文件开始定义主页存在的要素，包括但不限于顶部的导航条（导航菜单）、主页Banner，精美的导航图片模块、联系方式以及底格的社交媒体按钮。通过替换图片文件、修改模块参数等方式，我们可以逐渐将范例的内容替换成我们自己的。
特别注意的是使用图标的技巧。这一套图标是来自Font Awesome Icons的开源协议，通过以下的按钮，我们可以查阅所有我们能使用的图标：
Font Awesome Icons
内容的基本结构 让我们来重点关注根目录下content的内容
. |---archetypes |---content | |---blogs | | |---_index.</description>
    </item>
    
  </channel>
</rss>